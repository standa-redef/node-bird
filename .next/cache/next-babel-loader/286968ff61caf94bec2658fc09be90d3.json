{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/huhdongwu/Documents/twitter/prepare/front/components/PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector } from \"react-redux\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport FollowButton from \"./FollowButton\";\nvar CardWrapper = styled.div(_templateObject());\n_c = CardWrapper;\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n\n  var _useState2 = useState(false),\n      liked = _useState2[0],\n      setLiked = _useState2[1];\n\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  return __jsx(CardWrapper, {\n    key: post.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }))] // extra={<FollowButton post={post} />}\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 24\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }\n        }, __jsx(\"a\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 23\n          }\n        }, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }\n        }, item.User.nickname[0]))),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(PostCard, \"+5KxjPCW3FV0o49CDsZMpd+x3qc=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  })\n};\nexport default PostCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CardWrapper\");\n$RefreshReg$(_c2, \"PostCard\");","map":{"version":3,"sources":["/Users/huhdongwu/Documents/twitter/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","Link","useSelector","CommentForm","PostCardContent","PostImages","FollowButton","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","me","liked","setLiked","onToggleLike","prev","onToggleComment","Images","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","createdAt","arrayOf"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Card, Button, Avatar, Popover, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport {\n  RetweetOutlined,\n  HeartTwoTone,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n} from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport Link from \"next/link\";\nimport { useSelector } from \"react-redux\";\n\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport PostImages from \"./PostImages\";\nimport FollowButton from \"./FollowButton\";\n\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const id = useSelector((state) => state.user.me && state.user.me.id);\n\n  const [liked, setLiked] = useState(false);\n\n  const onToggleLike = useCallback(() => {\n    setLiked((prev) => !prev);\n  }, []);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n\n  return (\n    <CardWrapper key={post.id}>\n      <Card\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <RetweetOutlined key=\"retweet\" />,\n          liked ? (\n            <HeartTwoTone\n              twoToneColor=\"#eb2f96\"\n              key=\"heart\"\n              onClick={onToggleLike}\n            />\n          ) : (\n            <HeartOutlined key=\"heart\" onClick={onToggleLike} />\n          ),\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={\n              <Button.Group>\n                {id && post.User.id === id ? (\n                  <>\n                    <Button>수정</Button>\n                    <Button type=\"danger\">삭제</Button>\n                  </>\n                ) : (\n                  <Button>신고</Button>\n                )}\n              </Button.Group>\n            }\n          >\n            <EllipsisOutlined />\n          </Popover>,\n        ]}\n        // extra={<FollowButton post={post} />}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={<PostCardContent postData={post.content} />}\n        />\n      </Card>\n      {commentFormOpened && (\n        <>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments.length} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments}\n            renderItem={(item) => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\n                      as={`/user/${item.User.id}`}\n                    >\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </CardWrapper>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n  }),\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}